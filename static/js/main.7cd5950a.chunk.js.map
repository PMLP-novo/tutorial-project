{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","alt","src","id","name","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","setSearchField","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredMonsters","this","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGA,SAASA,EAAT,GAAyB,IAAVC,EAAS,EAATA,QACX,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAQI,GAAlC,eAC1B,6BAAKJ,EAAQK,OACb,6BAAKL,EAAQM,UAH4BN,EAAQI,ICArD,SAASG,EAASC,GACd,OAAQ,qBAAKP,UAAU,YAAf,SAA4BO,EAAMC,SAASC,KAAI,SAAAV,GAAO,OAC9D,cAACD,EAAD,CAAMC,QAASA,S,MCHnB,SAASW,EAAT,GAA+C,IAA3BC,EAA0B,EAA1BA,YAAYC,EAAc,EAAdA,aAC5B,OAAQ,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,I,ICyBzEG,E,kDAxBb,aAAc,IAAD,8BACX,gBAQFC,eAAe,SAACC,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SARxC,EAAKC,MAAQ,CAACd,SAAS,GAAIW,YAAY,IAF5B,E,gEAIO,IAAD,OACjBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACV,SAASmB,S,+BAM/B,IAAD,OACAC,EAAmBC,KAAKP,MAAMd,SAASsB,QAAO,SAAA/B,GAAO,OAAEA,EAAQK,KAAK2B,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBACxH,OACE,sBAAK/B,UAAU,MAAf,UACE,0CACA,cAACU,EAAD,CAAWC,YAAY,kBAAkBC,aAAciB,KAAKb,iBAC5D,cAACV,EAAD,CAAUE,SAAUoB,W,GAnBVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.7cd5950a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.css'\r\n\r\nfunction Card({monster}){\r\n    return (\r\n        <div className='card-container' key={monster.id}>\r\n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2`}/>\r\n    <h2>{monster.name}</h2>\r\n    <h2>{monster.email}</h2>\r\n    </div>)\r\n  }\r\n\r\nexport {Card}","import React from \"react\";\r\nimport \"./card-list.css\"\r\nimport {Card} from '../card/card'\r\n\r\n\r\nfunction CardList(props){\r\n    return (<div className='card-list'>{props.monsters.map(monster => \r\n    <Card monster={monster}/>)}</div>)\r\n}\r\n\r\nexport {CardList}\r\n","import React from \"react\";\r\n\r\nimport './search-box.css'\r\n\r\nfunction SearchBox({placeholder,handleChange}){\r\n    return (<input className='search' type='search' placeholder={placeholder} onChange={handleChange}/>)\r\n}\r\n\r\nexport {SearchBox}","import React,{Component} from \"react\";\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list\"\nimport {SearchBox} from \"./components/search-box/search-box\"\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {monsters:[], searchField:''}\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json())\n    .then(users=> this.setState({monsters:users}))\n  }\n\n  setSearchField=(event)=>{\n    this.setState({searchField:event.target.value})\n  }\n  render(){\n    const filteredMonsters = this.state.monsters.filter(monster=>monster.name.toLowerCase().includes(this.state.searchField.toLowerCase()))\n    return (\n      <div className=\"App\">\n        <h1>Monsters</h1>\n        <SearchBox placeholder='search monsters' handleChange={this.setSearchField}/>\n        <CardList monsters={filteredMonsters}/>\n        \n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}